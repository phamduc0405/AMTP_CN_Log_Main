using APlc;
using ACO2_App._0.INIT;
using ACO2_App._0.Model;
using ACO2_App._0.Plc;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using static APlc.MelsecIF;
using ACO2.Data;
using ACO2.INIT;
using System.Diagnostics;
using OfficeOpenXml.ConditionalFormatting;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Shapes;
using Mitsu3E;
using static ACO2_App._0.INIT.T5Helper;
using System.Windows.Forms;
using CsvHelper;
using System.Globalization;
using Path = System.IO.Path;
using System.Runtime.Remoting.Channels;
using System.Windows.Threading;
using MTP.Model;
using AINI;
using ABOOKFEEDER.INIT;

namespace ACO2_App._0
{
    public class Controller
    {
        #region Enum
        public enum Zone
        {
            Zone1,
            Zone2,
        }
        public enum Tool
        {
            Tool1,
            Tool2,
        }
        #endregion
        #region Field
        #region Classes
        private List<Equipment> _equipment;
        private ControllerConfig _controllerConfig;
        private APlc.PlcComm _plc;
        private PLCHelper _plcH;
        private ListCellDatas _listCellDatas;
        private DataLog _dataLog;
        private MachineStatus _machineStatus;
        private List<CurrentData> _currDatas;
        private List<DefectCode> _defectCodes;

        #endregion
        #region Common
        private bool _isTrigging;
        private Thread _aliveBit;
        private bool _isPlcConnected;
        private Dictionary<string, Func<Task>> _handlers;

        #endregion
        #endregion
        #region Property
        #region Classes
        public List<Equipment> Equipment
        { get { return _equipment; } set { _equipment = value; } }
        public ControllerConfig ControllerConfig
        {
            get { return _controllerConfig; }
            set { _controllerConfig = value; }
        }
        public APlc.PlcComm Plc
        {
            get { return _plc; }
            set { _plc = value; }
        }
        public PLCHelper PlcH
        {
            get { return _plcH; }
            set { _plcH = value; }
        }
        public ListCellDatas ListCellDatas
        {
            get { return _listCellDatas; }
            set { _listCellDatas = value; }
        }
        public MachineStatus MachineStatus
        {
            get { return _machineStatus; }
            set { _machineStatus = value; }
        }
        public List<CurrentData> CurrsDatas { get { return _currDatas; } set { _currDatas = value; } }
        public List<DefectCode> DefectCodes
        {
            get { return _defectCodes; }
            set { _defectCodes = value; }
        }
        #endregion
        #region Common
        public bool IsPlcConnected
        {
            get { return _isPlcConnected; }
        }
        #endregion
        #endregion
        #region Event
        public event Action<CellData> CellLogDataChanged;
        public event Action HeaderStatusChanged;
        public delegate void CurrDataEventDelegate(List<CurrentData> currData);
        public event CurrDataEventDelegate CurrDataEvent;
        public delegate void PlcConnectChangeEventDelegate(bool isConnected);
        public event PlcConnectChangeEventDelegate PlcConnectChangeEvent;
        public delegate Task<bool> MessageDisplayEventDelegate(bool isYesNo, string message);
        public event MessageDisplayEventDelegate MessageDisplayEvent;
        #endregion
        #region Constuctor
        public Controller()
        {
            _controllerConfig = new ControllerConfig();
            _listCellDatas = new ListCellDatas();
            ReadControllerConfig();
            ReadCellDataBackup();
            _equipment = new List<Equipment>();
            foreach (var eqpc in _controllerConfig.EqpConfigs)
            {
                Equipment e = new Equipment(eqpc.EQPIndex, eqpc);
                _equipment.Add(e);
            }
            if (_controllerConfig != null)
            {
                _dataLog = new DataLog(_controllerConfig.EQPID, _controllerConfig.DelLog);
            }
            else _dataLog = new DataLog(_controllerConfig.EQPID);
            _dataLog.Start();
            _machineStatus = new MachineStatus();
            _defectCodes = new List<DefectCode>();
            _defectCodes = ReadDefectConfig();
        }
        public void test()
        {
           _machineStatus.ChannelStatus.FirstOrDefault(x => x.ZoneNo == "1" && x.Channnel == "CH03").Status="SKIP";
            _machineStatus.ChannelStatus.FirstOrDefault(x => x.ZoneNo == "2" && x.Channnel == "CH05").Status = "SKIP";

        }
        public void InitialChannelStatus()
        {
            var zone1 = GetManyWordValueInAreaFromPLC("STATUS_ZONE1");
            foreach (var channel in zone1)
            {
                    _machineStatus.ChannelStatus.Add(new ChannelStatus
                    {
                        ZoneNo = "1",
                        Channnel = channel.Comment.Replace("CHANNEL", "CH"),
                        Status = ""
                    });
            }
            var zone2 = GetManyWordValueInAreaFromPLC("STATUS_ZONE2");
            foreach (var channel in zone2)
            {
                _machineStatus.ChannelStatus.Add(new ChannelStatus
                {
                    ZoneNo = "2",
                    Channnel = channel.Comment.Replace("CHANNEL", "CH"),
                    Status = ""
                });
            }
        }
        public async void Initial()
        {
            foreach (var e in _equipment)
            {
                e.Initial();
                Thread.Sleep(1000);
                e.Start();
            }
            InitialPlc();
            InitialChannelStatus();
        }
        public void InitialPlc()
        {
            if (_controllerConfig.PLCConfig != null)
            {

                _plc = new PlcComm();
                _plc.ConfigComm(_controllerConfig.PLCConfig);
                _plc.Start();
                _plcH = new PLCHelper();
                _plcH = _controllerConfig.PLCHelper;
                _plcH.Start(_plc, _controllerConfig.EQPID);
                _aliveBit = new Thread(Alive)
                {
                    IsBackground = true
                };
                _aliveBit.Start();
                InitialHandler();
                _plcH.BitChangedEvent += (name, bit) =>
                {
                    PLCBitChange((BitModel)bit);
                };

            }

        }
        public void InitialGetDataProduct()
        {
            _currDatas = new List<CurrentData>();

            List<CellData> tempData = LoadDataByDateRange(DateTime.Now, DateTime.Now);

            if (tempData == null || tempData.Count == 0)
            {
                LogTxt.Add(LogTxt.Type.Status, "[DATA] CANNOT GET DATA PRODUCT FROM EXCEL.");
                return;
            }

            var groupedData = tempData.GroupBy(c => new { c.ZoneNo, c.Channel.ChannelNo })
                                      .Select(g => new CurrentData
                                      {
                                          Time = DateTime.Now,
                                          Zone = g.Key.ZoneNo,
                                          ChannelName = g.Key.ChannelNo,
                                          Good = g.Count(c => c.Channel.MTPWriteResult == "GOOD"),
                                          NGContact = g.Count(c => !string.IsNullOrEmpty(c.Channel.ContactResult) && c.Channel.ContactResult != "GOOD"),
                                          NGIns = g.Count(c => !string.IsNullOrEmpty(c.Channel.MTPWriteResult) && c.Channel.MTPWriteResult != "GOOD")
                                      }).ToList();

            _currDatas.AddRange(groupedData);

            foreach (var data in _currDatas)
            {
                LogTxt.Add(LogTxt.Type.Status, $"[ZONE {data.Zone} - CHANNEL {data.ChannelName}] Good: {data.Good}, NGContact: {data.NGContact}, NGIns: {data.NGIns}");
            }
        }

        #endregion
        #region Destructor
        public void Dispose()
        {
            foreach (var eqp in _equipment)
            {
                eqp?.Close();
            }
            _aliveBit?.Abort();
            _plc.Close();
            _plcH?.Close();
            _dataLog?.Stop();
        }
        #endregion
        #region Config
        //T: Read Controller Config
        private void ReadControllerConfig()
        {
            try
            {
                if (File.Exists(DefaultData.AppPath + @"\Setting\SystemConfig.setting"))
                {
                    string readText = File.ReadAllText(DefaultData.AppPath + @"\Setting\SystemConfig.setting");
                    _controllerConfig = XmlHelper<ControllerConfig>.DeserializeFromString(readText);
                    if (_controllerConfig == null)
                    {
                        _controllerConfig = new ControllerConfig();
                    }
                    DefaultData.LogPath = _controllerConfig.PathLog;
                }
                else
                {
                    _controllerConfig.PathLog = DefaultData.LogPath;
                    _controllerConfig.DelLog = 30;
                }
            }
            catch (Exception ex)
            {
                var debug = string.Format("Class:{0} Method:{1} exception occurred. Message is <{2}>.", MethodBase.GetCurrentMethod().DeclaringType.Name.ToString(), MethodBase.GetCurrentMethod().Name, ex.Message);
                LogTxt.Add(LogTxt.Type.Exception, debug);
            }
        }
        //T: Save Controller Config
        public void SaveControllerConfig()
        {
            string str = XmlHelper<ControllerConfig>.SerializeToString(_controllerConfig);
            try
            {
                Task.Run(() =>
                {
                    string path = DefaultData.AppPath + @"\Setting";
                    DefaultData.CheckFolder(path);
                    path += @"\SystemConfig.setting";
                    File.WriteAllText(path, str);
                });
            }
            catch (Exception ex)
            {
                var debug = string.Format("Class:{0} Method:{1} exception occurred. Message is <{2}>.", this.GetType().Name, MethodBase.GetCurrentMethod().Name, ex.Message);
                LogTxt.Add(LogTxt.Type.Exception, debug);
            }
        }
        //T: Read Cell Data Backup
        private void ReadCellDataBackup()
        {
            try
            {
                if (File.Exists(DefaultData.AppPath + @"\Setting\DataCellBackup.data"))
                {
                    string readText = File.ReadAllText(DefaultData.AppPath + @"\Setting\DataCellBackup.data");
                    ListCellDatas = XmlHelper<ListCellDatas>.DeserializeFromString(readText);
                    if (_listCellDatas == null)
                    {
                        _listCellDatas = new ListCellDatas();
                    }
                }
                else
                {
                    _controllerConfig.PathLog = DefaultData.LogPath;
                    _controllerConfig.DelLog = 30;
                }
            }
            catch (Exception ex)
            {
                var debug = string.Format("Class:{0} Method:{1} exception occurred. Message is <{2}>.", MethodBase.GetCurrentMethod().DeclaringType.Name.ToString(), MethodBase.GetCurrentMethod().Name, ex.Message);
                LogTxt.Add(LogTxt.Type.Exception, debug);
            }
        }
        //T: Save Cell Data Backup
        public void SaveCellDataBackup()
        {
            string str = XmlHelper<ListCellDatas>.SerializeToString(_listCellDatas);
            try
            {
                Task.Run(() =>
                {
                    string path = DefaultData.AppPath + @"\Setting";
                    DefaultData.CheckFolder(path);
                    path += @"\DataCellBackup.data";
                    File.WriteAllText(path, str);
                });
            }
            catch (Exception ex)
            {
                var debug = string.Format("Class:{0} Method:{1} exception occurred. Message is <{2}>.", this.GetType().Name, MethodBase.GetCurrentMethod().Name, ex.Message);
                LogTxt.Add(LogTxt.Type.Exception, debug);
            }
        }
        //T: Read Defect Code Config
        public List<DefectCode> ReadDefectConfig(string path = "")
        {
            List<DefectCode> defectcodes = new List<DefectCode>();
            string pathfile = path == "" ? DefaultData.AppPath + String.Format(@"\Setting\DefectCode.ini") : path;
            if (File.Exists(pathfile))
            {
                int totalcount = int.Parse(IniHelper.READ(pathfile, "Result Error Code", "Total Count"));
                for (int i = 0; i < totalcount; i++)
                {
                    try
                    {
                        string[] value = IniHelper.READ(pathfile, "Result Error Code", i.ToString()).Split(',');
                        if (value.Length > 5)
                        {

                            var info = new DefectCode()
                            {
                                Index = i.ToString(),
                                DefectName = value[0],
                                DefectGroup = value[1],
                                Msg = value[2],
                                PrintCode = value[3],
                                AbRule = value[4],
                                Tray = value[5],
                            };

                            defectcodes.Insert(i, info);


                        }
                    }
                    catch (Exception ex)
                    {
                        var debug = string.Format("Class:{0} Method:{1} exception occurred. Message is <{2}>.", this.GetType().Name, MethodBase.GetCurrentMethod().Name, ex.Message);
                        LogTxt.Add(LogTxt.Type.Exception, debug);
                    }
                }

            }
            return defectcodes;

        }
        //T: Save DefectCode
        public async Task<bool> SaveDefectConfig(List<DefectCode> defectCodes, string path = "")
        {
            try
            {
                await Task.Run(() =>
                {
                    string pathfile = path == "" ? DefaultData.AppPath + @"\Setting\DefectCode.ini" : path;

                    // Write total count
                    IniHelper.WRITE(pathfile, "Result Error Code", "Total Count", defectCodes.Count.ToString());

                    // Write each defect code
                    for (int i = 0; i < defectCodes.Count; i++)
                    {
                        var defectCode = defectCodes[i];
                        string value = string.Join(",", defectCode.DefectName, defectCode.DefectGroup, defectCode.Msg, defectCode.PrintCode, defectCode.AbRule, defectCode.Tray);
                        IniHelper.WRITE(pathfile, "Result Error Code", i.ToString(), value);
                    }
                });

                return true;
            }
            catch (Exception ex)
            {
                var debug = string.Format("Class:{0} Method:{1} exception occurred. Message is <{2}>.", this.GetType().Name, MethodBase.GetCurrentMethod().Name, ex.Message);
                LogTxt.Add(LogTxt.Type.Exception, debug);
                return false;
            }
        }
        #endregion
        #region Private Method
        private async Task<bool> MessageDisplayEventHandle(bool isYesNo, string message)
        {
            var handle = MessageDisplayEvent;
            if (handle != null)
            {
                var result = await handle(isYesNo, message);
                return result == true;
            }
            // Return a default value if there are no subscribers
            return false;
        }
        #endregion
        #region Public Method
        #region Interface with PLC
        public bool GetSignalBitFromPLC(string Name, string Area = "")
        {
            bool signal = false;
            signal = _plcH.Bits.FirstOrDefault(x => x.Item == $"{Name}").GetPLCValue;
            return signal;
        }
        public bool GetSignalBitFromPC(string Name, string Area = "")
        {
            bool signal = false;
            signal = _plcH.Bits.FirstOrDefault(x => x.Item == $"{Name}").GetPCValue;
            return signal;
        }
        public string GetWordValueFromPLC(string Name, bool isPLCWord, string Area = "")
        {
            string value = "";
            value = _plcH.Words.FirstOrDefault(x => x.Comment == $"{Name}" && x.IsPlc == isPLCWord).GetValue;
            return value;
        }
        public List<WordModel> GetManyWordValueInAreaFromPLC(string area)
        {
            List<WordModel> words = new List<WordModel>();
            words= _plcH.Words.Where(x => x.IsPlc==true && x.Area == area).ToList();
            return words;
        }
        public bool SetSignalBitFromPC(string Name, bool value, string Area = "")
        {
            bool signal = false;
            _plcH.Bits.FirstOrDefault(x => x.Item == $"{Name}").SetPCValue = value;
            signal = GetSignalBitFromPC($"{Name}");
            if (signal == value) return true;
            else return false;
        }
        public bool SetWordValueFromPC(string Name, string value, string Area = "")
        {
            _plcH.Words.FirstOrDefault(x => x.Comment == $"{Name}").SetValue = value;
            if (GetWordValueFromPLC($"{Name}", false) == value) { return true; } else { return false; }
        }

        #endregion
        public async void PLCBitChange(BitModel bit)
        {
            await Task.Run(async () =>
            {
                switch (bit.Type.Trim())
                {
                    case "Command":
                        if (bit.GetPLCValue)
                        {
                            bit.SetPCValue = false;
                        }
                        break;

                    case "Event":
                        if (bit.GetPLCValue)
                        {
                            if (_handlers.TryGetValue(bit.Comment, out Func<Task> handler))
                            {
                                await handler();
                                bit.SetPCValue = true;
                            }
                            bit.SetPCValue = true;
                        }
                        else
                        {
                            bit.SetPCValue = false;
                        }
                        break;
                }
               
            });
        }
        #region Handle Signal PLC
        private void InitialHandler()
        {
            _handlers = new Dictionary<string, Func<Task>>(StringComparer.OrdinalIgnoreCase)
        {
            { "TRACK_IN_TOOL1", HandleCellTrackInTool1 },
            { "TRACK_IN_TOOL2", HandleCellTrackInTool2 },

            { "ROBOT1_TOOL1_DROP", HandleRobotZone1DropTool1 },
            { "ROBOT1_TOOL2_DROP", HandleRobotZone1DropTool2 },
            { "ROBOT2_TOOL1_DROP", HandleRobotZone2DropTool1 },
            { "ROBOT2_TOOL2_DROP", HandleRobotZone2DropTool2 },

            { "ROBOT1_TOOL1_PICK", HandleRobotZone1PickTool1 },
            { "ROBOT1_TOOL2_PICK", HandleRobotZone1PickTool2 },
            { "ROBOT2_TOOL1_PICK", HandleRobotZone2PickTool1 },
            { "ROBOT2_TOOL2_PICK", HandleRobotZone2PickTool2 },

            { "TRACK_OUT_TOOL1", HandleCellTrackOutTool1 },
            { "TRACK_OUT_TOOL2", HandleCellTrackOutTool2 },

        };

        }
        private async Task HandleRobotSequence(string command)
        {

        }
        private async Task HandleRobotZone1DropTool1()
        {
            try
            {
                string cellIdRb1DropTool1 = "";
                string channelRb1DropTool1 = "";
                bool isTimeOut = false;
             
                (cellIdRb1DropTool1, channelRb1DropTool1, isTimeOut) = await WaitForPlcData("CELL_ID_RB1_DROP_TOOL1", "CHANNEL_RB1_DROP_TOOL1");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT",true);
                    return;
                }
               
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][DROP]:" + $"RECEIVE DATA PLC: " +
                    $"CELL_ID_RB1_DROP_TOOL1:{GetWordValueFromPLC("CELL_ID_RB1_DROP_TOOL1", true)} " +
                    $"CHANNEL_RB1_DROP_TOOL1:{GetWordValueFromPLC("CHANNEL_RB1_DROP_TOOL1", true)}" 
               );
                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb1DropTool1, true);
                if (cellData != null)
                {
                    cellData.Channel.ChannelNo = channelRb1DropTool1;
                    cellData.UnitStartTime = DateTime.Now;
                    cellData.ZoneNo = "1";
                    cellData.InsRobotToolNo = "1";
                }
                else
                {
                    //cellData = new CellData
                    //{
                    //    CellID = cellIdRb1DropTool1,
                    //    Channel = new Channel { ChannelNo = channelRb1DropTool1 },
                    //    UnitStartTime = DateTime.Now,
                    //    ZoneNo = "1",
                    //    InsRobotToolNo = "1"
                    //};
                    //_listCellDatas.CellDatas.Add(cellData);
                    string Message = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][DROP]:CANNOT FIND CELL IN QUEUE New CellData Added:" + Message);
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][DROP]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB1_DROP_TOOL1", true)} CHANNEL:{GetWordValueFromPLC("CHANNEL_RB1_DROP_TOOL1", true)}");
                string logMessage = CreateLogFollowCellData(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][DROP]: CellData Updated:" + logMessage);

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT1][TOOL1][DROP]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][DROP]:" + debug);
            }
        }
        private async Task HandleRobotZone1DropTool2()
        {
            try
            {
                string cellIdRb1DropTool2 = "";
                string channelRb1DropTool2 = "";
                bool isTimeOut = false;
                (cellIdRb1DropTool2, channelRb1DropTool2,isTimeOut) = await WaitForPlcData("CELL_ID_RB1_DROP_TOOL2", "CHANNEL_RB1_DROP_TOOL2");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][DROP]:" + $"RECEIVE DATA PLC: CELL_ID_RB1_DROP_TOOL2:{GetWordValueFromPLC("CELL_ID_RB1_DROP_TOOL2", true)} CHANNEL_RB1_DROP_TOOL2:{GetWordValueFromPLC("CHANNEL_RB1_DROP_TOOL2", true)}");
                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb1DropTool2, true);
                if (cellData != null)
                {
                    cellData.Channel.ChannelNo = channelRb1DropTool2;
                    cellData.UnitStartTime = DateTime.Now;
                    cellData.ZoneNo = "1";
                    cellData.InsRobotToolNo = "2";
                }
                else
                {
                    //cellData = new CellData
                    //{
                    //    CellID = cellIdRb1DropTool2,
                    //    Channel = new Channel { ChannelNo = channelRb1DropTool2 },
                    //    UnitStartTime = DateTime.Now,
                    //    ZoneNo = "1",
                    //    InsRobotToolNo = "2"
                    //};
                    //_listCellDatas.CellDatas.Add(cellData);
                    string Message = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][DROP]:CANNOT FIND CELL IN QUEUE New CellData Added:" + Message);
                }

                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][DROP]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB1_DROP_TOOL2", true)} CHANNEL:{GetWordValueFromPLC("CHANNEL_RB1_DROP_TOOL2", true)}");
                string logMessage = CreateLogFollowCellData(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][DROP]:  CellData updated:" + logMessage);

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT1][TOOL2][DROP]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][DROP]:" + debug);
            }
        }
        private async Task HandleRobotZone2DropTool1()
        {
            try
            {
                string cellIdRb2DropTool1 = "";
                string channelRb2DropTool1 = "";
                bool isTimeOut = false;
                (cellIdRb2DropTool1, channelRb2DropTool1, isTimeOut) = await WaitForPlcData("CELL_ID_RB2_DROP_TOOL1", "CHANNEL_RB2_DROP_TOOL1");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][DROP]:" + $"RECEIVE DATA PLC: CELL_ID_RB2_DROP_TOOL1:{GetWordValueFromPLC("CELL_ID_RB2_DROP_TOOL1", true)} CHANNEL_RB2_DROP_TOOL1:{GetWordValueFromPLC("CHANNEL_RB2_DROP_TOOL1", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb2DropTool1, true);
                if (cellData != null)
                {
                    cellData.Channel.ChannelNo = channelRb2DropTool1;
                    cellData.UnitStartTime = DateTime.Now;
                    cellData.ZoneNo = "2";
                    cellData.InsRobotToolNo = "1";
                }
                else
                {
                    //cellData = new CellData
                    //{
                    //    CellID = cellIdRb2DropTool1,
                    //    Channel = new Channel { ChannelNo = channelRb2DropTool1 },
                    //    UnitStartTime = DateTime.Now,
                    //    ZoneNo = "2",
                    //    InsRobotToolNo = "1"
                    //};
                    //_listCellDatas.CellDatas.Add(cellData);
                    string Message = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][DROP]:CANNOT FIND CELL IN QUEUE New CellData Added:" + Message);
                }

                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][DROP]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB2_DROP_TOOL1", true)} CHANNEL:{GetWordValueFromPLC("CHANNEL_RB2_DROP_TOOL1", true)}");
                string logMessage = CreateLogFollowCellData(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][DROP]: CellData Updated:" + logMessage);

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT2][TOOL1][DROP]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][DROP]:" + debug);
            }
        }
        private async Task HandleRobotZone2DropTool2()
        {
            try
            {
                string cellIdRb2DropTool2 = "";
                string channelRb2DropTool2 = "";
                bool isTimeOut = false;
                (cellIdRb2DropTool2, channelRb2DropTool2, isTimeOut) = await WaitForPlcData("CELL_ID_RB2_DROP_TOOL2", "CHANNEL_RB2_DROP_TOOL2");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][DROP]:" + $"RECEIVE DATA PLC: CELL_ID_RB2_DROP_TOOL2:{GetWordValueFromPLC("CELL_ID_RB2_DROP_TOOL2", true)} CHANNEL_RB2_DROP_TOOL2:{GetWordValueFromPLC("CHANNEL_RB2_DROP_TOOL2", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb2DropTool2, true);
                if (cellData != null)
                {
                    cellData.Channel.ChannelNo = channelRb2DropTool2;
                    cellData.UnitStartTime = DateTime.Now;
                    cellData.ZoneNo = "2";
                    cellData.InsRobotToolNo = "2";
                }
                else
                {
                    //cellData = new CellData
                    //{
                    //    CellID = cellIdRb2DropTool2,
                    //    Channel = new Channel { ChannelNo = channelRb2DropTool2 },
                    //    UnitStartTime = DateTime.Now,
                    //    ZoneNo = "2",
                    //    InsRobotToolNo = "2"
                    //};
                    //_listCellDatas.CellDatas.Add(cellData);
                    string Message = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][DROP]:CANNOT FIND CELL IN QUEUE New CellData Added:" + Message);
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][DROP]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB2_DROP_TOOL2", true)} CHANNEL:{GetWordValueFromPLC("CHANNEL_RB2_DROP_TOOL2", true)}");
                string logMessage = CreateLogFollowCellData(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][DROP]: CellData Updated:" + logMessage);

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT2][TOOL2][DROP]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][DROP]:" + debug);
            }
        }
        private async Task HandleRobotZone1PickTool1()
        {
            try
            {
                string cellIdRb1PickTool1 = "";
                string channelRb1PickTool1 = "";
                bool isTimeOut = false;
                (cellIdRb1PickTool1, channelRb1PickTool1, isTimeOut) = await WaitForPlcData("CELL_ID_RB1_PICK_TOOL1", "CHANNEL_RB1_PICK_TOOL1");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][PICK]:" + $"RECEIVE DATA PLC: CELL_ID_RB1_PICK_TOOL1:{GetWordValueFromPLC("CHANNEL_RB1_PICK_TOOL1", true)} CHANNEL_RB1_PICK_TOOL1:{GetWordValueFromPLC("CHANNEL_RB1_PICK_TOOL1", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb1PickTool1, false, true, channelRb1PickTool1);
                if (cellData != null)
                {
                    var cell = _equipment[0].Channels.FirstOrDefault(channel => channel.CellID == cellIdRb1PickTool1 && channel.ChannelNo == channelRb1PickTool1);
                    if (cell == null)
                    {
                        cellData.Channel = cell;
                        cellData.UnitEndTime = DateTime.Now;
                        cellData.UnitTackTime = (cellData.UnitEndTime - cellData.UnitStartTime).TotalSeconds;
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][PICK]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB1_PICK_TOOL1", true)} CHANNEL:{GetWordValueFromPLC("CELL_ID_RB1_PICK_TOOL1", true)}");
                        string logMessage = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][PICK]:  CellData Updated:" + logMessage);
                    }
                    else
                    {
                        string m = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][PICK]:CANNOT FIND IN EQUIP Channel have same cellID&Channel with Queue  CellData:" + m);
                    }
                }
                else
                {
                    string m = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][PICK]:CANNOT FIND CELL IN QUEUE  CellData:" + m);
                }



            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT1][TOOL1][PICK]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL1][PICK]:" + debug);
            }
        }
        private async Task HandleRobotZone1PickTool2()
        {
            try
            {
                string cellIdRb1PickTool2 = "";
                string channelRb1PickTool2 = "";
                bool isTimeOut = false;
                (cellIdRb1PickTool2, channelRb1PickTool2, isTimeOut) = await WaitForPlcData("CELL_ID_RB1_PICK_TOOL2", "CHANNEL_RB1_PICK_TOOL2");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][PICK]:" + $"RECEIVE DATA PLC: CELL_ID_RB1_PICK_TOOL2:{GetWordValueFromPLC("CHANNEL_RB1_PICK_TOOL2", true)} CHANNEL_RB1_PICK_TOOL2:{GetWordValueFromPLC("CHANNEL_RB1_PICK_TOOL2", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb1PickTool2, false, true, channelRb1PickTool2);
                if (cellData != null)
                {
                    var cell = _equipment[0].Channels.FirstOrDefault(channel => channel.CellID == cellIdRb1PickTool2 && channel.ChannelNo == channelRb1PickTool2);
                    if (cell != null)
                    {
                        cellData.Channel = cell;
                        cellData.UnitEndTime = DateTime.Now;
                        cellData.UnitTackTime = (cellData.UnitEndTime - cellData.UnitStartTime).TotalSeconds;
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][PICK]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB1_PICK_TOOL2", true)} CHANNEL:{GetWordValueFromPLC("CELL_ID_RB1_PICK_TOOL2", true)}");
                        string logMessage = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][PICK]:  CellData Updated:" + logMessage);
                    }
                    else
                    {
                        string m = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][PICK]:CANNOT FIND IN EQUIP Channel have same cellID&Channel with Queue  CellData:" + m);
                    }
                }
                else
                {
                    string m = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][PICK]:CANNOT FIND CELL IN QUEUE  CellData:" + m);
                }


            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT1][TOOL2][PICK]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT1][TOOL2][PICK]:" + debug);
            }
        }
        private async Task HandleRobotZone2PickTool1()
        {
            try
            {
                string cellIdRb2PickTool1 = "";
                string channelRb2PickTool1 = "";
                bool isTimeOut = false;
                (cellIdRb2PickTool1, channelRb2PickTool1, isTimeOut) = await WaitForPlcData("CELL_ID_RB2_PICK_TOOL1", "CHANNEL_RB2_PICK_TOOL1");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][PICK]:" + $"RECEIVE DATA PLC: CELL_ID_RB2_PICK_TOOL1:{GetWordValueFromPLC("CHANNEL_RB2_PICK_TOOL1", true)} CHANNEL_RB2_PICK_TOOL1:{GetWordValueFromPLC("CHANNEL_RB2_PICK_TOOL1", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb2PickTool1, false, true, channelRb2PickTool1);
                if (cellData != null)
                {
                    var cell = _equipment[1].Channels.FirstOrDefault(channel => channel.CellID == cellIdRb2PickTool1 && channel.ChannelNo == channelRb2PickTool1);
                    if (cell != null)
                    {
                        cellData.Channel = cell;
                        cellData.UnitEndTime = DateTime.Now;
                        cellData.UnitTackTime = (cellData.UnitEndTime - cellData.UnitStartTime).TotalSeconds;
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][PICK]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB2_PICK_TOOL1", true)} CHANNEL:{GetWordValueFromPLC("CELL_ID_RB2_PICK_TOOL1", true)}");
                        string logMessage = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][PICK]:  CellData Updated:" + logMessage);
                    }
                    else
                    {
                        string m = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][PICK]:CANNOT FIND IN EQUIP Channel have same cellID&Channel with Queue  CellData:" + m);
                    }
                }
                else
                {
                    string m = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][PICK]:CANNOT FIND CELL IN QUEUE  CellData:" + m);
                }



            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT2][TOOL1][PICK]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL1][PICK]:" + debug);
            }
        }
        private async Task HandleRobotZone2PickTool2()
        {
            try
            {
                string cellIdRb2PickTool2 = "";
                string channelRb2PickTool2 = "";
                bool isTimeOut = false;
                (cellIdRb2PickTool2, channelRb2PickTool2, isTimeOut) = await WaitForPlcData("CELL_ID_RB2_PICK_TOOL2", "CHANNEL_RB2_PICK_TOOL2");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][PICK]:" + $"RECEIVE DATA PLC: CELL_ID_RB2_PICK_TOOL2:{GetWordValueFromPLC("CHANNEL_RB2_PICK_TOOL2", true)} CHANNEL_RB2_PICK_TOOL2:{GetWordValueFromPLC("CHANNEL_RB2_PICK_TOOL2", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIdRb2PickTool2, false, true, channelRb2PickTool2);
                if (cellData != null)
                {
                    var cell = _equipment[1].Channels.FirstOrDefault(channel => channel.CellID == cellIdRb2PickTool2 && channel.ChannelNo == channelRb2PickTool2);
                    if (cell != null)
                    {
                        cellData.Channel = cell;
                        cellData.UnitEndTime = DateTime.Now;
                        cellData.UnitTackTime = (cellData.UnitEndTime - cellData.UnitStartTime).TotalSeconds;

                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][PICK]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_RB2_PICK_TOOL2", true)} CHANNEL:{GetWordValueFromPLC("CELL_ID_RB2_PICK_TOOL2", true)}");
                        string logMessage = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][PICK]:  CellData Updated:" + logMessage);
                    }
                    else
                    {
                        string m = CreateLogFollowCellData(cellData);
                        LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][PICK]:CANNOT FIND IN EQUIP Channel have same cellID&Channel with Queue  CellData:" + m);
                    }
                }
                else
                {
                    string m = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][PICK]:CANNOT FIND CELL IN QUEUE  CellData:" + m);
                }


            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[ROBOT2][TOOL2][PICK]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[ROBOT2][TOOL2][PICK]:" + debug);
            }
        }
        private async Task HandleCellTrackInTool1()
        {
            try
            {
                string cellIDTrackIn = "";
                string resultTrackIn = "";
                bool isTimeOut = false;
                (cellIDTrackIn, resultTrackIn, isTimeOut) = await WaitForPlcData("CELL_ID_TRACKIN_TOOL1", "RESULT_TRACKIN_TOOL1");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL1]:" + $"RECEIVE DATA PLC: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKIN_TOOL1", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKIN_TOOL1", true)}");

                // Save To Log
                CellData cellData = new CellData();
                cellData.CellID = cellIDTrackIn;
                cellData.TrackIn = resultTrackIn;
                cellData.MCStartTime = DateTime.Now;
                _listCellDatas.CellDatas.Add(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL1]:" + $"ADD DATA TO QUEUEE: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKIN_TOOL1", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKIN_TOOL1", true)}");
                string logMessage = CreateLogFollowCellData(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL1] New CellData Added:" + logMessage);

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[TRACKIN][TOOL1]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL1]:" + debug);
            }
        }
        private async Task HandleCellTrackInTool2()
        {
            try
            {
                string cellIDTrackIn = "";
                string resultTrackIn = "";
                bool isTimeOut = false;
                (cellIDTrackIn, resultTrackIn, isTimeOut) = await WaitForPlcData("CELL_ID_TRACKIN_TOOL2", "RESULT_TRACKIN_TOOL2");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL2]:" + $"RECEIVE DATA PLC: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKIN_TOOL2", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKIN_TOOL2", true)}");

                // Save To Log
                CellData cellData = new CellData();
                cellData.CellID = cellIDTrackIn;
                cellData.TrackIn = resultTrackIn;
                cellData.MCStartTime = DateTime.Now;
                _listCellDatas.CellDatas.Add(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL2]:" + $"ADD DATA TO QUEUEE: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKIN_TOOL2", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKIN_TOOL2", true)}");
                string logMessage = CreateLogFollowCellData(cellData);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL2] New CellData Added:" + logMessage);

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[TRACKIN][TOOL2]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKIN][TOOL2]:" + debug);
            }
        }
        private async Task HandleCellTrackOutTool1()
        {
            try
            {
                string cellIDTrackOut = "";
                string resultTrackOut = "";
                bool isTimeOut = false;
                (cellIDTrackOut, resultTrackOut, isTimeOut) = await WaitForPlcData("CELL_ID_TRACKOUT_TOOL1", "RESULT_TRACKOUT_TOOL1");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL1]:" + $"RECEIVE DATA PLC: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKOUT_TOOL1", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKOUT_TOOL1", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIDTrackOut, false, false, "", true);
                if (cellData != null)
                {
                    cellData.TrackOut = resultTrackOut;
                    cellData.MCEndTime = DateTime.Now;
                    cellData.MCTackTime = (cellData.MCEndTime - cellData.MCStartTime).TotalSeconds;

                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL1]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKOUT_TOOL1", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKOUT_TOOL1", true)}");
                    SaveDataLog(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL1]:" + $"SAVE DATA TO DATALOG: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKOUT_TOOL1", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKOUT_TOOL1", true)}");

                    string logMessage = CreateLogFollowCellData(cellData);
                    _listCellDatas.CellDatas.Remove(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL1]:  CellData Remove from List:" + logMessage);
                }
                else
                {
                    string m = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL1]:CANNOT FIND CELL IN QUEUE  CellData:" + m);
                }

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[TRACKOUT][TOOL1]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL1]:" + debug);
            }
        }
        private async Task HandleCellTrackOutTool2()
        {
            try
            {
                string cellIDTrackOut = "";
                string resultTrackOut = "";
                bool isTimeOut = false;
                (cellIDTrackOut, resultTrackOut, isTimeOut) = await WaitForPlcData("CELL_ID_TRACKOUT_TOOL2", "RESULT_TRACKOUT_TOOL2");
                if (isTimeOut)
                {
                    SetSignalBitFromPC("TIME_OUT", true);
                    return;
                }
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL2]:" + $"RECEIVE DATA PLC: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKOUT_TOOL2", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKOUT_TOOL2", true)}");

                // Save To Log
                CellData cellData = FindCellInListTemp(cellIDTrackOut, false, false, "", true);
                if (cellData != null)
                {
                    cellData.TrackOut = resultTrackOut;
                    cellData.MCEndTime = DateTime.Now;
                    cellData.MCTackTime = (cellData.MCEndTime - cellData.MCStartTime).TotalSeconds;

                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL2]:" + $"UPDATE DATA IN LIST: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKOUT_TOOL2", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKOUT_TOOL2", true)}");
                    SaveDataLog(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL2]:" + $"SAVE DATA TO DATALOG: CELLID:{GetWordValueFromPLC("CELL_ID_TRACKOUT_TOOL2", true)} RESULT:{GetWordValueFromPLC("RESULT_TRACKOUT_TOOL2", true)}");

                    string logMessage = CreateLogFollowCellData(cellData);
                    _listCellDatas.CellDatas.Remove(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL2]:  CellData Remove from List:" + logMessage);
                }
                else
                {
                    string m = CreateLogFollowCellData(cellData);
                    LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL2]:CANNOT FIND CELL IN QUEUE  CellData:" + m);
                }

            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[TRACKOUT][TOOL2]:" + debug);
                LogTxt.Add(LogTxt.Type.FlowRun, "[TRACKOUT][TOOL2]:" + debug);
            }
        }
        #endregion
        #region Method Excute Data
        public CellData FindCellInListTemp(string cellid, bool isStepStartIns = false, bool isStepInsDone = false, string channel = "", bool isStepStartTrackOut = false)
        {
            if (isStepStartIns)
            {
                return _listCellDatas.CellDatas.FirstOrDefault(cell => cell.CellID == cellid && cell.TrackIn == "OK");
            }
            else if (isStepInsDone && !isStepStartIns)
            {
                return _listCellDatas.CellDatas.FirstOrDefault(cell => cell.CellID == cellid && cell.TrackIn == "OK" && cell.Channel.ChannelNo == channel);
            }
            else if (isStepStartTrackOut)
            {
                return _listCellDatas.CellDatas.FirstOrDefault(cell => cell.CellID == cellid);
            }
            return null;
        }
        public async Task<(string cellId, string channel,bool isTimeOut)> WaitForPlcData(string cellIdKey, string data2key)
        {
            int maxTimeoutMs = 10000;
            StopWatch stopwatch = new StopWatch();
            stopwatch.Start();

            while (string.IsNullOrEmpty(GetWordValueFromPLC(cellIdKey, true)) &&
                   string.IsNullOrEmpty(GetWordValueFromPLC(data2key, true)))
            {
                if (stopwatch.CheckElapsedTime(maxTimeoutMs))
                {
                    LogTxt.Add(LogTxt.Type.FlowRun, $"[PLC TIMEOUT] Timeout while waiting for {cellIdKey} and {data2key}.");
                    return (null, null, true); 
                }
                Thread.Sleep(5);
            }
            stopwatch.Stop();

            string cellId = GetWordValueFromPLC(cellIdKey, true);
            string data2 = GetWordValueFromPLC(data2key, true);

            return (cellId, data2,false);
        }
        private void GetStatusDataFromPLC()
        {
            switch(GetWordValueFromPLC("STATUS", true))
            {
                case "0": _machineStatus.Status = "AUTO"; break; 
                case "1": _machineStatus.Status = "MANUAL"; break;
                case "2": _machineStatus.Status = "ERROR"; break;
                default : _machineStatus.Status = "DEFAULT";  break;
            }
            switch (GetWordValueFromPLC("AVAILABILITYSTATE", true))
            {
                case "0": _machineStatus.Status = "UP"; break;
                case "1": _machineStatus.Status = "DOWN"; break;
                default: _machineStatus.Status = "DEFAULT"; break;
            }
            switch (GetWordValueFromPLC("INTERLOCKSTATE", true))
            {
                case "0": _machineStatus.Status = "ON"; break;
                case "1": _machineStatus.Status = "OFF"; break;
                default: _machineStatus.Status = "DEFAULT"; break;
            }
            switch (GetWordValueFromPLC("MOVESTATE", true))
            {
                case "0": _machineStatus.Status = "RUNNING"; break;
                case "1": _machineStatus.Status = "PAUSE"; break;
                default: _machineStatus.Status = "DEFAULT"; break;
            }
            switch (GetWordValueFromPLC("RUNSTATE", true))
            {
                case "0": _machineStatus.Status = "RUN"; break;
                case "1": _machineStatus.Status = "IDLE"; break;
                default: _machineStatus.Status = "DEFAULT"; break;
            }
            _machineStatus.ChannelStatus.Clear();
            
            var zone1 = GetManyWordValueInAreaFromPLC("STATUS_ZONE1");
            foreach(var channel in zone1)
            {
                string status = "";
                switch (channel.GetValue)
                {
                    case "0":status = "AUTO";break;
                    case "1":status = "MANUAL";break;
                    case "2":status = "SKIP";break;
                }
               var channelstatus = _machineStatus.ChannelStatus.FirstOrDefault(x=>x.ZoneNo=="1"&&x.Channnel== channel.Comment.Replace("CHANNEL", "CH"));
                if(channelstatus != null)
                {
                    channelstatus.Status = status;
                }
                else
                {
                    _machineStatus.ChannelStatus.Add(new ChannelStatus
                    {
                        ZoneNo = "1",
                        Channnel = channel.Comment.Replace("CHANNEL", "CH"),
                        Status = status
                    });
                }
            }
            var zone2 = GetManyWordValueInAreaFromPLC("STATUS_ZONE2");
            foreach (var channel in zone2)
            {
                string status = "";
                switch (channel.GetValue)
                {
                    case "0": status = "AUTO"; break;
                    case "1": status = "MANUAL"; break;
                    case "2": status = "SKIP"; break;
                }
                var channelstatus = _machineStatus.ChannelStatus.FirstOrDefault(x => x.ZoneNo == "2" && x.Channnel == channel.Comment.Replace("CHANNEL", "CH"));
                if (channelstatus != null)
                {
                    channelstatus.Status = status;
                }
                else
                {
                    _machineStatus.ChannelStatus.Add(new ChannelStatus
                    {
                        ZoneNo = "2",
                        Channnel = channel.Comment.Replace("CHANNEL", "CH"),
                        Status = status
                    });
                }
            }
        }
        #endregion
        #region Handler LOG
        public void SaveDataLog(CellData productData)
        {
            if (productData == null) return;
            
            var header = new StringBuilder();
            #region Make header
            header.Append("TIME,");
            header.Append("CELLID,");
            header.Append("EQPID,");
            header.Append("ZONE_NO,");
            header.Append("CELLID,");
            header.Append("MCR,");
            header.Append("TRACKIN,");
            header.Append("TRACKOUT,");

            header.Append("INS_ROBOT_TOOL,");
            header.Append("CHANNEL,");

            header.Append("X600,");
            header.Append("TX_HOST_VER,");
            header.Append("T5_MAC_ADDRESS,");

            header.Append("CONTACT_RESULT,");
            header.Append("MTP_WRITE_RESULT,");
            header.Append("DEFECTCODE,");

            header.Append("MC_START_TIME,");
            header.Append("MC_END_TIME,");
            header.Append("MC_TAKTTIME,");

            header.Append("UNIT_START_TIME,");
            header.Append("UNIT_END_TIME,");
            header.Append("UNIT_TAKTTIME,");

            header.Append("INS_START_TIME,");
            header.Append("INS_END_TIME,");
            header.Append("INS_TAKTTIME,");

            header.Append("CONTACT_START_TIME,");
            header.Append("CONTACT_END_TIME,");
            header.Append("CONTACT_TAKTTIME,");

            header.Append("MTPWRITE_START_TIME,");
            header.Append("MTPWRITE_END_TIME,");
            header.Append("MTPWRITE_TAKTTIME,");
            #endregion
            #region Make header
            header.Append("TIME,");
            header.Append("MACHINE,");
            header.Append("EQPID,");
            header.Append("ZONE_NO,");
            header.Append("CELLID,");
            header.Append("MCR,");
            header.Append("TRACKIN,");
            header.Append("TRACKOUT,");

            header.Append("INS_ROBOT_TOOL,");
            header.Append("CHANNEL,");

            header.Append("X600,");
            header.Append("TX_HOST_VER,");
            header.Append("T5_MAC_ADDRESS,");

            header.Append("CONTACT_RESULT,");
            header.Append("MTP_WRITE_RESULT,");
            header.Append("DEFECTCODE,");

            header.Append("MC_START_TIME,");
            header.Append("MC_END_TIME,");
            header.Append("MC_TAKTTIME,");

            header.Append("UNIT_START_TIME,");
            header.Append("UNIT_END_TIME,");
            header.Append("UNIT_TAKTTIME,");

            header.Append("INS_START_TIME,");
            header.Append("INS_END_TIME,");
            header.Append("INS_TAKTTIME,");

            header.Append("CONTACT_START_TIME,");
            header.Append("CONTACT_END_TIME,");
            header.Append("CONTACT_TAKTTIME,");

            header.Append("MTPWRITE_START_TIME,");
            header.Append("MTPWRITE_END_TIME,");
            header.Append("MTPWRITE_TAKTTIME,");
            #endregion
            #region Make content
            int indexeqp = int.Parse(productData.ZoneNo)-1;
            var content = new StringBuilder();
            productData.Time = DateTime.Now;
            productData.MachineName = _controllerConfig.EQPID;
            productData.EQPID = _controllerConfig.EqpConfigs[indexeqp].EQPID;

            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.Time)); // TIME
            content.Append(string.Format("{0},", productData.MachineName)); //MACHINE
            content.Append(string.Format("{0},", productData.EQPID)); //EQPID
            content.Append(string.Format("{0},", productData.ZoneNo)); //ZONE
            content.Append(string.Format("{0},", productData.CellID)); //CELLID
            content.Append(string.Format("{0},", productData.MCR)); //MCR
            content.Append(string.Format("{0},", productData.TrackIn)); //TRACKIN
            content.Append(string.Format("{0},", productData.TrackOut)); //TRACKOUT

            content.Append(string.Format("{0},", productData.InsRobotToolNo)); //INS_ROBOT_TOOL
            content.Append(string.Format("{0},", productData.Channel.ChannelNo)); //CHANNEL

            content.Append(string.Format("{0},", productData.Channel.X600)); //X600
            content.Append(string.Format("{0},", productData.Channel.TxHostVer)); //TX_HOST_VER
            content.Append(string.Format("{0},", productData.Channel.T5MACAddress)); //T5_MAC_ADDRESS

            content.Append(string.Format("{0},", productData.Channel.ContactResult)); //CONTACT_RESULT
            content.Append(string.Format("{0},", productData.Channel.MTPWriteResult)); //MTP_WRITE_RESULT
            content.Append(string.Format("{0},", productData.Channel.DefectCode)); //DEFECTCODE

            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.MCStartTime)); // MC_START_TIME
            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.MCEndTime)); // MC_END_TIME
            content.Append(string.Format("{0},", productData.MCTackTime)); //MC_TAKTTIME

            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.UnitStartTime)); // UNIT_START_TIME
            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.UnitEndTime)); // UNIT_END_TIME
            content.Append(string.Format("{0},", productData.UnitTackTime)); //UNIT_TAKTTIME

            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.Channel.InsStartTime)); // INS_START_TIME
            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.Channel.InsEndTime)); // INS_END_TIME
            content.Append(string.Format("{0},", productData.Channel.InsTackTime)); //INS_TAKTTIME

            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.Channel.ContactStartTime)); // CONTACT_START_TIME
            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.Channel.ContactEndTime)); // CONTACT_END_TIME
            content.Append(string.Format("{0},", productData.Channel.ContactTackTime)); //CONTACT_TAKTTIME

            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.Channel.MTPStartTime)); // MTPWRITE_START_TIME
            content.Append(string.Format("{0:yyyy-MM-dd HH:mm:ss},", productData.Channel.MTPEndTime)); // MTPWRITE_END_TIME
            content.Append(string.Format("{0},", productData.Channel.MTPTackTime)); //MTPWRITE_TAKTTIME
            #endregion

            var result = _dataLog.Add(header.ToString(), content.ToString());
            Thread.Sleep(1000);
            Task.WaitAll(result);
            UpdateCurrData(productData);
        }
        private void UpdateCurrData(CellData productData)
        {
            if (productData == null) return;

                string zone = productData.ZoneNo;
                string channel = productData.Channel.ChannelNo;

                // Tìm dữ liệu trong _currDatas theo Zone và Channel
                var existingData = _currDatas.FirstOrDefault(c => c.Zone == zone && c.ChannelName == channel);

                if (existingData != null)
                {
                    // Kiểm tra và cập nhật số liệu dựa trên productData
                    if (productData.Channel.MTPWriteResult == "GOOD")
                    {
                        existingData.Good++;
                    CurrDataEventHandle(_currDatas);
                }
                    else if (!string.IsNullOrEmpty(productData.Channel.MTPWriteResult) && productData.Channel.MTPWriteResult != "GOOD")
                    {
                        existingData.NGIns++;
                    CurrDataEventHandle(_currDatas);
                }

                    if (!string.IsNullOrEmpty(productData.Channel.ContactResult) && productData.Channel.ContactResult != "GOOD")
                    {
                        existingData.NGContact++;
                    CurrDataEventHandle(_currDatas);
                }
                }
                else
                {
                    // Nếu chưa có dữ liệu, thêm mới vào danh sách
                    if (!string.IsNullOrEmpty(productData.Channel.MTPWriteResult) || !string.IsNullOrEmpty(productData.Channel.ContactResult))
                    {
                        var newData = new CurrentData
                        {
                            Time = DateTime.Now,
                            Zone = zone,
                            ChannelName = channel,
                            Good = productData.Channel.MTPWriteResult == "GOOD" ? 1 : 0,
                            NGIns = (!string.IsNullOrEmpty(productData.Channel.MTPWriteResult) && productData.Channel.MTPWriteResult != "GOOD") ? 1 : 0,
                            NGContact = (!string.IsNullOrEmpty(productData.Channel.ContactResult) && productData.Channel.ContactResult != "GOOD") ? 1 : 0
                        };
                       
                        _currDatas.Add(newData);
                    CurrDataEventHandle(_currDatas);
                }
                }
        }

        public string CreateLogFollowCellData(CellData cellData)
        {
          return  cellData == null
       ? "[ERROR] cellData is null."
       : string.Join(" ; ", cellData.GetType().GetProperties()
             .Select(prop => $"{prop.Name}: {prop.GetValue(cellData) ?? "NULL"}"));
        }
        //T: LoadDataByDateRange
        public List<CellData> LoadDataByDateRange(DateTime startDate, DateTime endDate)
        {
            List<CellData> productDatas = new List<CellData>();
            string folderPath = "";
            try
            {
                // Set the folder containing year directories
                folderPath = $"{DefaultData.LogPath}\\Data"; 
                // Get the list of dates within the selected date range
                List<DateTime> dateRange = GetDateRange(startDate, endDate);

                foreach (DateTime date in dateRange)
                {
                    // Construct paths for year and month directories
                    string yearDirectory = Path.Combine(folderPath, date.Year.ToString());
                    string monthDirectory = Path.Combine(yearDirectory, date.ToString("MM"));
                    string filePath = "";
                     filePath = Path.Combine(monthDirectory, $"{_controllerConfig.EQPID}_{date:dd}.csv"); 


                    // Check and process the CSV file
                    if (File.Exists(filePath))
                    {
                        using (var reader = new StreamReader(filePath))
                        using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                        {
                            // Read the header
                            csv.Read();
                            csv.ReadHeader();
                            var headers = csv.HeaderRecord;

                            // Read records dynamically
                            while (csv.Read())
                            {
                                var productData = new CellData
                                {
                                    
                                    Time = DateTime.Parse(csv.GetField("TIME")),
                                    
                                    MachineName = csv.GetField("EQPID"),
                                    EQPID = csv.GetField("EQPID"),
                                    ZoneNo = csv.GetField("ZONE_NO"),
                                    CellID = csv.GetField("CELLID"),
                                    MCR = csv.GetField("MCR"),
                                    TrackIn = csv.GetField("TRACKIN"),
                                    TrackOut = csv.GetField("TRACKOUT"),
                                    InsRobotToolNo = csv.GetField("INS_ROBOT_TOOL"),
                                    MCStartTime = DateTime.Parse(csv.GetField("MC_START_TIME")),
                                    MCEndTime = DateTime.Parse(csv.GetField("MC_END_TIME")),
                                    MCTackTime = double.Parse(csv.GetField("MC_TAKTTIME")),
                                    UnitStartTime = DateTime.Parse(csv.GetField("UNIT_START_TIME")),
                                    UnitEndTime = DateTime.Parse(csv.GetField("UNIT_END_TIME")),
                                    UnitTackTime = double.Parse(csv.GetField("UNIT_TAKTTIME")),
                                    
                                    Channel = new Channel
                                    {
                                        ChannelNo = csv.GetField("CHANNEL"),
                                        X600 = csv.GetField("X600"),
                                        TxHostVer = csv.GetField("TX_HOST_VER"),
                                        T5MACAddress = csv.GetField("T5_MAC_ADDRESS"),
                                        ContactResult = csv.GetField("CONTACT_RESULT"),
                                        MTPWriteResult = csv.GetField("MTP_WRITE_RESULT"),
                                        DefectCode = csv.GetField("DEFECTCODE"),
                                        InsStartTime = DateTime.Parse(csv.GetField("INS_START_TIME")),
                                        InsEndTime = DateTime.Parse(csv.GetField("INS_END_TIME")),
                                        InsTackTime = double.Parse(csv.GetField("INS_TAKTTIME")),
                                        ContactStartTime = DateTime.Parse(csv.GetField("CONTACT_START_TIME")),
                                        ContactEndTime = DateTime.Parse(csv.GetField("CONTACT_END_TIME")),
                                        ContactTackTime = double.Parse(csv.GetField("CONTACT_TAKTTIME")),
                                        MTPStartTime = DateTime.Parse(csv.GetField("MTPWRITE_START_TIME")),
                                        MTPEndTime = DateTime.Parse(csv.GetField("MTPWRITE_END_TIME")),
                                        MTPTackTime = double.Parse(csv.GetField("MTPWRITE_TAKTTIME")),
                                    }
                                };
                              
                                productDatas.Add(productData);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                var debug = string.Format("Class:{0} Method:{1} exception occurred. Message is <{2}>.",
                                           this.GetType().Name, MethodBase.GetCurrentMethod().Name, ex.Message);
                LogTxt.Add(LogTxt.Type.Exception, debug);
            }
            return productDatas;
        }
        private List<DateTime> GetDateRange(DateTime startDate, DateTime endDate)
        {
            var dateRange = new List<DateTime>();
            for (var date = startDate; date <= endDate; date = date.AddDays(1))
            {
                dateRange.Add(date);
            }
            return dateRange;
        }
        #endregion
        public async Task<bool> DisplayMessage(bool isYesNo, string message)
        {
            var result = await MessageDisplayEventHandle(isYesNo, message);
            return result;
        }
        private async Task HandleRobotZone(Zone zone, Tool tool, Action action)
        {
            try
            {


            }
            catch (Exception e)
            {
                string debug = string.Format("{0} exception occurred. Message is <{1}>.", MethodBase.GetCurrentMethod().Name, e.Message);
                LogTxt.Add(LogTxt.Type.Exception, "[TRACKIN]:" + debug);
            }
        }
        public void UserLevelChange(int userLogin)
        {
            MainWindow.UserLogin = userLogin;
            HeaderStatusChanged?.Invoke();
        }
        #endregion
        #region Update
        public void Alive()
        {
            bool plcAlive = false;
            int plcCount = 0;
            bool isOn = false;

            BitModel bitAlive = null;

            while (true)
            {
                if (_plc != null)
                {
                    if (_plc.IsOpen)
                    {
                        try
                        {
                            isOn = !isOn;
                            if (bitAlive == null)
                            {
                                bitAlive = _plcH.Bits.FirstOrDefault(x => x.Item.ToUpper() == "ALIVE");
                            }

                            if (bitAlive != null)
                            {
                                bitAlive.SetPCValue = isOn;

                                if (plcAlive == bitAlive.GetPLCValue)
                                {
                                    plcCount++;
                                    if (plcCount > 100)
                                    {
                                        if (_isPlcConnected)
                                        {
                                            LogTxt.Add(LogTxt.Type.Status, "[PLC] Disconnect with PLC!");
                                            PlcConnectChangeEventHandle(false);
                                            _isPlcConnected = false;
                                        }
                                    }
                                }
                                else
                                {
                                    if (!_isPlcConnected)
                                    {
                                        LogTxt.Add(LogTxt.Type.Status, "[PLC] Reconnect with PLC.");
                                    }
                                    _isPlcConnected = true;
                                    plcCount = 0;
                                    plcAlive = bitAlive.GetPLCValue;
                                    PlcConnectChangeEventHandle(true);
                                }
                            }
                            else
                            {
                                LogTxt.Add(LogTxt.Type.Exception, "[PLC] Cannot find Bit ALIVE!");
                            }
                        }
                        catch (Exception ex)
                        {
                            LogTxt.Add(LogTxt.Type.Exception, $"[PLC] {ex.Message}");
                        }
                    }
                    else
                    {
                        if (_isPlcConnected)
                        {
                            LogTxt.Add(LogTxt.Type.Status, "[PLC] Disconnect because _plc.IsOpen = false.");
                            PlcConnectChangeEventHandle(false);
                            _isPlcConnected = false;
                        }
                    }
                }
                else
                {
                    if (_isPlcConnected)
                    {
                        LogTxt.Add(LogTxt.Type.Status, "[PLC] Disconnect because _plc == null.");
                        PlcConnectChangeEventHandle(false);
                        _isPlcConnected = false;
                    }
                }
                Thread.Sleep(200);
            }
        }

        #endregion

        #region EventHandle
        private void PlcConnectChangeEventHandle(bool isConnected)
        {
            var handle = PlcConnectChangeEvent;
            if (handle != null)
            {
                handle(isConnected);
            }
        }

        public void CurrDataEventHandle(List<CurrentData> currDatas)
        {
            var handle = CurrDataEvent;
            if (handle != null)
            {
                handle(currDatas);
            }
        }

        #endregion
    }
}
